[
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#this-webinar-will-be-recorded",
    "href": "Manipulating and Joining Data in R with dplyr.html#this-webinar-will-be-recorded",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "This webinar will be recorded! 🎥",
    "text": "This webinar will be recorded! 🎥\nYour continued participation indicates your consent to be recorded. This recording may be shared with the JHU community.\nAny questions you ask verbally or in chat will be edited to protect your identity."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#jhu-data-services",
    "href": "Manipulating and Joining Data in R with dplyr.html#jhu-data-services",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "JHU Data Services",
    "text": "JHU Data Services\nWe help faculty, researchers, and students find, use, manage, visualize, and share data.\n\nFind out more at dataservices.library.jhu.edu\nEmail us for a consultation at dataservices@jhu.edu\nShare your research data at archive.data.jhu.edu"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#what-you-will-learn-today",
    "href": "Manipulating and Joining Data in R with dplyr.html#what-you-will-learn-today",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "What you will learn today",
    "text": "What you will learn today\n\nHow to reshape data using the powerful dplyr package\nHow to use the pipe |&gt; to simplify code\nHow to join two datasets together using different approaches and conditions\nAdditional resources for manipulating and joining data using dplyr"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#you-should-have",
    "href": "Manipulating and Joining Data in R with dplyr.html#you-should-have",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "You should have:",
    "text": "You should have:\n\nA template R script that we will fill out today called class_script_blank.R\ndplyr cheatsheet\nBasic knowledge of R\n\nInstalling and loading packages\nBasic terminology of R or programming in general"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#why-reshape-data",
    "href": "Manipulating and Joining Data in R with dplyr.html#why-reshape-data",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "Why reshape data?",
    "text": "Why reshape data?\n\n\nCalculate new variables to analyze\nSummarize data differently to suit your unit of analysis\nRearrange or sort data to make it easier to visualize"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#libraries",
    "href": "Manipulating and Joining Data in R with dplyr.html#libraries",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "Libraries",
    "text": "Libraries\nToday we’ll be using the tidyverse library, which includes dplyr.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#review-reading-and-viewing-data",
    "href": "Manipulating and Joining Data in R with dplyr.html#review-reading-and-viewing-data",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "Review: reading and viewing data",
    "text": "Review: reading and viewing data\n\n# we'll be looking at data on Groundhog predictions\ngroundhogs &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-30/groundhogs.csv')\npredictions &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-30/predictions.csv')\n\nYou can view a dataframe in R using View() or by clicking the object in the environment pane.\nLet’s take a look at our groundhog predictions dataset:\n\nhead(predictions)\n\n\n  \n\n\n\n\nNote variable types and highlight that different transformations we will talk about today can be applied to variables of different types"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#our-task-today",
    "href": "Manipulating and Joining Data in R with dplyr.html#our-task-today",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "Our task today",
    "text": "Our task today\n\nWe are groundhog mythbusters and our goal is to collect some summary statistics about the groundhog prediction phenomenon.\nOur main question is whether different groundhogs are more or less likely to predict an early spring.\nOver the course of this workshop, we’ll be creating summary tables that will set us up for further visualization and analysis."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#the-dplyr-package",
    "href": "Manipulating and Joining Data in R with dplyr.html#the-dplyr-package",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "The dplyr package",
    "text": "The dplyr package\n\n\ndplyr is a “grammar” of data manipulation\ndplyr is a set of R functions that work together to help you solve the most common data manipulation challenges, like:\n\n\nFiltering out certain rows and sorting your data\nCalculating a new column based on existing columns\nGrouping and summarizing data\nJoining data from different sources"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#dplyr-grammar",
    "href": "Manipulating and Joining Data in R with dplyr.html#dplyr-grammar",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "dplyr grammar",
    "text": "dplyr grammar\n\n\ndplyr’s core is a set functions that can be divided into 4 groups based on what they operate across:\n\nrows\ncolumns\ngroups\ntables\n\nWe’ll call these the dplyr verbs\ndplyr also contains a number of useful helper functions that operate on single values or arrays. We’ll introduce those along the way."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#anatomy-of-a-dplyr-verb",
    "href": "Manipulating and Joining Data in R with dplyr.html#anatomy-of-a-dplyr-verb",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "anatomy of a dplyr verb",
    "text": "anatomy of a dplyr verb\nIn every dplyr verb:\n\n\nthe first argument is always dataframe\nthe output is always a new dataframe\narguments with a . in front of them are settings for the function, not column names"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#the-pipe",
    "href": "Manipulating and Joining Data in R with dplyr.html#the-pipe",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "the pipe 💉",
    "text": "the pipe 💉\n\n\nEach verb does one thing very well, so you’ll typically chain together multiple verbs. The pipe helps you do this by passing the result of every action onto the next action.\nThe pipe is represented in R as |&gt;. Everything to the left of the pipe is passed as the first argument to the thing immediately to the right of the pipe.\nx |&gt; f(y) is equivalent to f(x, y)\nx |&gt; f(y) |&gt; g(x) is equivalent tog(f(x,y), z)\n⚠️ The pipe does not save new variables automatically"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#row-verbs-filter",
    "href": "Manipulating and Joining Data in R with dplyr.html#row-verbs-filter",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "row verbs: filter()",
    "text": "row verbs: filter()\n\nfilter() : keep rows based on the value of one or more columns\nYou can compose conditions using ==, &gt;, &lt;, &gt;=, &lt;=, !=, and include multiple conditions using & or |\nThe %in% operator can serve as a combination of | and =="
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#row-verbs-filter-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#row-verbs-filter-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "row verbs: filter()",
    "text": "row verbs: filter()\n\n# find groundhog predictions from 2020\nfilter(predictions, year == 2020)\n\n\n  \n\n\n# find groundhog predictions from 2020 and 2021\nfilter(predictions, year == 2020 | year == 2021)\n\n\n  \n\n\nfilter(predictions, year %in% c(2020, 2021))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#filter-your-turn",
    "href": "Manipulating and Joining Data in R with dplyr.html#filter-your-turn",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "filter(): your turn!",
    "text": "filter(): your turn!\nFind groundhog predictions between 1900 and 2000. Bonus: Use the pipe in your answer!"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#filter-your-turn-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#filter-your-turn-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "filter(): your turn!",
    "text": "filter(): your turn!\n\n# find predictions between 1900 and 2000\npredictions |&gt;\n  filter(year &gt;= 1900 & year &lt;= 2000)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#filter-useful-helper-functions",
    "href": "Manipulating and Joining Data in R with dplyr.html#filter-useful-helper-functions",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "filter(): useful helper functions",
    "text": "filter(): useful helper functions\n\nbetween() tests if a variable falls between two values (inclusive)\nnear() tests if a variable is within a certain range of a given number (you can set the tolerance)\nis.na() tests whether the variable is NA. Use is conjunction with ! to filter for non-NA values."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#row-verbs-arrange",
    "href": "Manipulating and Joining Data in R with dplyr.html#row-verbs-arrange",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "row verbs: arrange()",
    "text": "row verbs: arrange()\narrange(): changes the row order based on one or more columns\nYou can wrap the columns with desc() to sort in descending order\n\n\n\n# sort our predictions by year\narrange(predictions, year)\n\n\n  \n\n\n\n\n\n# sort our predictions by year\narrange(predictions, desc(year))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#row-verbs-distinct",
    "href": "Manipulating and Joining Data in R with dplyr.html#row-verbs-distinct",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "row verbs: distinct()",
    "text": "row verbs: distinct()\ndistinct(): finds all the unique rows based on the values of one or more columns\n\nWithout any additional inputs, distinct() finds and keeps the first occurence of all unique rows\nYou can optionally supply one or more columns to check for distinct combinations of\n\n\npredictions |&gt;\n  distinct(year)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-row-verbs",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-row-verbs",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: row verbs",
    "text": "🚩checkpoint: row verbs\nLet’s put it all together!\n\nRemove rows with no prediction record\nRemove duplicate predictions\nSort the result by year, descending\nAssign the result to predictions, overwriting the previous dataframe\n\n\n\nlook at the predictions table in R and note that there are rows that represent years with no recorded prediction\nWe want to remove these from our analysis"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-row-verbs-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-row-verbs-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: row verbs",
    "text": "🚩checkpoint: row verbs\n\n# create a subset of your data where \"shadow\" has a value of either TRUE or FALSE. Make sure there are no duplicate rows, and sort the result by ascending year.\npredictions &lt;- predictions |&gt;\n  filter(shadow %in% c(TRUE, FALSE)) |&gt;\n  distinct(year, id, .keep_all = TRUE) |&gt;\n  arrange(desc(year))\n\n\n\nlook at the predictions table in R and note that there are rows that represent years with no recorded prediction\nWe want to remove these from our analysis"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#group-verbs-group_by",
    "href": "Manipulating and Joining Data in R with dplyr.html#group-verbs-group_by",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "group verbs: group_by()",
    "text": "group verbs: group_by()\ngroup_by() groups your dataframe\nOn it’s own, it doesn’t change your data. But you can feed the “grouped” output into other special functions to apply different transformations to each group in your data.\n\n# group predictions by year \npredictions |&gt;\n  group_by(year)\n\n\n  \n\n\n\n\n\nShow that the output now lists a group and tells us how many unique values are in that group"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#n-within-summarize",
    "href": "Manipulating and Joining Data in R with dplyr.html#n-within-summarize",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "n() within summarize()",
    "text": "n() within summarize()\n\nsummarize() reduces the dataframe to a summary table with one row for each group and one or more calculations by group\nOne of the most important summaries is n(), which counts the observations in each group.\nLet’s try it together: How many predictions were made in each year?"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#nwithin-summarize",
    "href": "Manipulating and Joining Data in R with dplyr.html#nwithin-summarize",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "n()within summarize()",
    "text": "n()within summarize()\n\n# How many predictions were made in each year?\npredictions |&gt;\n  group_by(year) |&gt;\n  summarize(n_predictions = n()) |&gt;\n  arrange(desc(year))\n\n\n  \n\n\n\n\n\nsummarize can be used to answer questions like “what is the average flight cost in each month”\nYou can use basically any function you can think of to summarize your dataset, i.e. mean()"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions",
    "href": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "summarize() helper functions",
    "text": "summarize() helper functions\n\nOther powerful summary functions include:\n\nn_distinct(): counts the number of distinct values of a given column within a group\nmax() and min(): finds the max and min value of a given column within a group\n\nExercises:\n\nHow many different groundhogs made predictions each year?\nWhat is the first year each groundhog made a prediction?"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "summarize() helper functions",
    "text": "summarize() helper functions\n\n# How many different groundhogs made predictions each year?\npredictions |&gt;\n  group_by(year) |&gt;\n  summarize(n_groundhogs = n_distinct(id)) |&gt;\n  arrange(desc(n_groundhogs))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions-2",
    "href": "Manipulating and Joining Data in R with dplyr.html#summarize-helper-functions-2",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "summarize() helper functions",
    "text": "summarize() helper functions\n\n# What is the first year each groundhog made a prediction?\npredictions |&gt;\n  group_by(id) |&gt;\n  summarize(first_prediction = min(year))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#sum-within-summarize",
    "href": "Manipulating and Joining Data in R with dplyr.html#sum-within-summarize",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "sum() within summarize()",
    "text": "sum() within summarize()\n\nsum(): finds the sum of a given column within a group. You can also specify conditions within sum() to calculate the number of records within a group that meet a certain condition.\nExercise: Let’s return to our dataframe with the number of predictions in each year. How would we add a column for the number of shadows seen in each year?"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#sum-within-summarize-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#sum-within-summarize-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "sum() within summarize()",
    "text": "sum() within summarize()\n\n# Let's return to our dataframe with the number of predictions in each year. \n# How would we add a column for the number of shadows seen in each year?\npredictions |&gt;\n  group_by(year) |&gt;\n  summarize(n_predictions = n(),\n            n_shadows = sum(shadow == TRUE))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-group-verbs",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-group-verbs",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: group verbs",
    "text": "🚩checkpoint: group verbs\nYour turn! Create a dataframe with three variables:\n\n\ngroundhog id\nthe number of total predictions each groundhog has made\nthe number of times each groundhog has seen it’s shadow."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-group-verbs-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-group-verbs-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: group verbs",
    "text": "🚩checkpoint: group verbs\n\n# Create a dataframe with 3 variables: \n# groundhog id\n# the number of total predictions each groundhog has made\n# the number of times each groundhog has seen its shadow\npredictions |&gt;\n  group_by(id) |&gt;\n  summarize(n_predictions = n(),\n            n_shadows = sum(shadow == TRUE))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#column-verbs",
    "href": "Manipulating and Joining Data in R with dplyr.html#column-verbs",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "column verbs",
    "text": "column verbs\nNow that we’ve calculated some summary variables within the groups that interest us (groundhog and year), we might want to use those summary variables to calculate more new variables."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#column-verbs-mutate",
    "href": "Manipulating and Joining Data in R with dplyr.html#column-verbs-mutate",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "column verbs: mutate()",
    "text": "column verbs: mutate()\nmutate() adds new columns calculated from existing columns\n\nBy default, columns are added on the left side of the dataframe. You can use the .before or .after to specify where the new variable should fall\n\n\n# calculate how many characters are in the details field and put the variable after id\npredictions |&gt;\n  mutate(details_length = nchar(details), .after = id)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#re-coding-data-with-mutate",
    "href": "Manipulating and Joining Data in R with dplyr.html#re-coding-data-with-mutate",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "re-coding data with mutate()",
    "text": "re-coding data with mutate()\nif_else() tests for a condition and returns one value if true and another if false.\n\n# create a column that indicates whether the prediction was made by Punxatawney Phil\npredictions |&gt; \n  mutate(phil = if_else(id == 1, 'TRUE', 'FALSE'))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#re-coding-data-with-mutate-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#re-coding-data-with-mutate-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "re-coding data with mutate()",
    "text": "re-coding data with mutate()\ncase_when() tests for multiple conditions and maps them to values accordingly.\n\n# create a column that indicates the century of the predictions\npredictions |&gt; \n  mutate(century = case_when(year &lt; 1900 ~ 19,\n                             year &lt; 2000 & year &gt;= 1900 ~ 20,\n                             year &gt;= 2000 ~ 21))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#column-verbs-select-and-rename",
    "href": "Manipulating and Joining Data in R with dplyr.html#column-verbs-select-and-rename",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "column verbs: select() and rename()",
    "text": "column verbs: select() and rename()\n\nselect() keeps a subset of columns\n\nYou can select by name, series, test for data type (select(where(is.character()))) or use other helper functions such as starts_with(), ends_with(), or contains()\nYou can rename variables as you select them with = , with the new name on the left and old on the right\n\nrename() works the same way as renaming in select with ="
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-put-it-all-together",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-put-it-all-together",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: put it all together!",
    "text": "🚩checkpoint: put it all together!\nLet’s return to our original research question: Are certain groundhogs more likely to see their shadow than others?\nWorking off of our table with the number of predictions and number of shadows seen per groundhog, lets:\n\nAdd a column called shadow_percent that gives the percentage of time each groundhog sees its shadow\nFilter for groundhogs with more than 5 predictions\nKeep only the variables id and shadow_percent, and rename id to groundhog_id\nAssign the result to a variable groundhog_predictions"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#checkpoint-put-it-all-together-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#checkpoint-put-it-all-together-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🚩checkpoint: put it all together!",
    "text": "🚩checkpoint: put it all together!\n\ngroundhog_predictions &lt;- predictions |&gt;\n  group_by(id) |&gt;\n  summarize(n_predictions = n(),\n            n_shadows = sum(shadow == TRUE)) |&gt;\n  mutate(shadow_percent = n_shadows/n_predictions) |&gt;\n  filter(n_predictions &gt; 5) |&gt;\n  select(id, shadow_percent) |&gt;\n  rename(groundhog_id = id)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#table-verbs-joining-data",
    "href": "Manipulating and Joining Data in R with dplyr.html#table-verbs-joining-data",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "table verbs: joining data",
    "text": "table verbs: joining data\nWe’ve done a lot with the mere 4 variables in our predictions table!\nWhat if we wanted to enhance our data with more information about each groundhog from the groundhogs table?\n\nhead(groundhogs)\n\n\n  \n\n\n\n\n\nPoint out the type variable\nLet’s find out how often groundhogs of different types see their shadow!"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#join-terminology",
    "href": "Manipulating and Joining Data in R with dplyr.html#join-terminology",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "join terminology",
    "text": "join terminology\nThere are two main types of join:\n\nmutating joins add variables from one dataframe to another based on matching characteristics between the two\nfiltering joins subset one dataframe based on matching characteristics with another dataframe"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#join-terminology-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#join-terminology-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "join terminology",
    "text": "join terminology\n\nEvery join involves a primary key and a foreign key\n\nA primary key is a variable or set of variables that uniquely identifies an observation\nA foreign key is just another table’s primary key that matches your tables’ primary key. It might have a different name or be spread across more or less variables.\n\nThe first step when joining data is to identify the primary and foreign keys you’ll work with\nAlways check that your primary & foreign keys are truly unique to each row!"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs",
    "href": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "joining predictions & groundhogs",
    "text": "joining predictions & groundhogs\n\nhead(groundhog_predictions, 3)\n\n\n  \n\n\n\n\nhead(groundhogs, 3)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "joining predictions & groundhogs",
    "text": "joining predictions & groundhogs\n\nHow would we determine if there is a difference between the average shadow prediction rate of different types of groundhogs?\nprimary key: groundhog_id in groundhog_predictions\nforeign key: id in groundhogs"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-2",
    "href": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-2",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "joining predictions & groundhogs",
    "text": "joining predictions & groundhogs\n\nWe want to add the variables from groundhogs to our groundhog_predictions table\nWe’ll need a mutating join, specifically a left join.\nA left join retains all rows in the left dataframe, and adds additional data in from the right dataframe if the keys match.\nleft_join(x, y, join_by(x.key == y.key))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-3",
    "href": "Manipulating and Joining Data in R with dplyr.html#joining-predictions-groundhogs-3",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "joining predictions & groundhogs",
    "text": "joining predictions & groundhogs\n\nleft_join(groundhog_predictions, groundhogs, join_by(groundhog_id == id))"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#more-mutating-joins",
    "href": "Manipulating and Joining Data in R with dplyr.html#more-mutating-joins",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "more mutating joins",
    "text": "more mutating joins\nright_join() keeps everything in the right dataframe and adds in data from the left"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#more-mutating-joins-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#more-mutating-joins-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "more mutating joins",
    "text": "more mutating joins\ninner_join() keeps rows with keys that appear in both dataframes\nfull_join() keeps all rows from both dataframes"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#filtering-joins",
    "href": "Manipulating and Joining Data in R with dplyr.html#filtering-joins",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "filtering joins",
    "text": "filtering joins\nfiltering joins subset one dataframe based on matching characteristics with another dataframe. In filtering\nsemi_join(x, y) keeps all rows in x with a match in y\nanti_join(x, y) returns all rows in x without a match in y"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#join-exercises",
    "href": "Manipulating and Joining Data in R with dplyr.html#join-exercises",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "join exercises",
    "text": "join exercises\n\ngroundhog_predictions contains one row per 50 unique groundhogs\ngroundhogs contains one row per 65 unique groundhogs\nEvery groundhog in groundhog_predictions appears in groundhogs\n\nHow many rows would each of the following joins have: right join with groundhogs on the right, inner join, full join, semi_join, anti_join?\n\n\n\n\ndemonstrate a right vs. left join - show how the number of rows differ and explain that this is because we filtered out 15 rows from groundhog_predictions\ndemonstrate inner join - explain that it is the same as the left join because all of the keys in groundhog_predictions appear in groundhogs\ndemonstrate full join"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#more-complex-join-conditions",
    "href": "Manipulating and Joining Data in R with dplyr.html#more-complex-join-conditions",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "more complex join conditions",
    "text": "more complex join conditions\n\nWithin join_by(), we can use more complex conditions than whether key == key\nYou can use other numeric operations like &gt;, &lt;, etc.\nThe closest() function matches the closest key to another key based on some criteria (closest value at all, closest value that is larger, etc.)\nbetween() and within() can test whether a value falls between two other values. This is useful if you want to join events that happened within a given time span."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#other-table-verbs",
    "href": "Manipulating and Joining Data in R with dplyr.html#other-table-verbs",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "other table verbs",
    "text": "other table verbs\n\nbind_rows() pastes rows onto the bottom of a dataframe\nbind_cols() pastes columns onto the right of a dataframe.\nThere is no matching logic in these functions, you can think of them as copy-and-paste."
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#finish-line",
    "href": "Manipulating and Joining Data in R with dplyr.html#finish-line",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🏁 finish line",
    "text": "🏁 finish line\nLet’s put everything we’ve learned together!\nLet’s create a summary table that gives the rate at which each type of groundhog sees its’ shadow"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#finish-line-1",
    "href": "Manipulating and Joining Data in R with dplyr.html#finish-line-1",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🏁 finish line",
    "text": "🏁 finish line\n\npredictions |&gt;\n  left_join(groundhogs, join_by(id == id)) |&gt;\n  group_by(type) |&gt;\n  summarize(n_groundhogs = n_distinct(id),\n            n_predictions = n(),\n            n_shadows = sum(shadow == TRUE)) |&gt;\n  mutate(percent_shadow = n_shadows/n_predictions)"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#bonus-exercises",
    "href": "Manipulating and Joining Data in R with dplyr.html#bonus-exercises",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "🏆 bonus exercises",
    "text": "🏆 bonus exercises\n\nwrite code to calculate the column predictions_count in groundhogs\nWrite code to calculate the column is_groundhog in groundhogs"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#summary-verbs-helper-functions",
    "href": "Manipulating and Joining Data in R with dplyr.html#summary-verbs-helper-functions",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "summary: verbs & helper functions",
    "text": "summary: verbs & helper functions\n\n\nVerbs:\n\nfilter() , arrange() , distinct()\ngroup_by() , summarize()\nmutate()\nleft_, right_, inner_, full_, semi_, anti_ joins\nbind _rows and _cols\n\n\nHelper functions:\n\ndesc()\nn(), n_distinct(), min(), max() , sum()\nif_else() and case_when()\nbetween() and within()"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#resources",
    "href": "Manipulating and Joining Data in R with dplyr.html#resources",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "resources",
    "text": "resources\n\nR for Data Science 2e, Chapters 3 & 19\ndplyr documentation"
  },
  {
    "objectID": "Manipulating and Joining Data in R with dplyr.html#thank-you",
    "href": "Manipulating and Joining Data in R with dplyr.html#thank-you",
    "title": "Manipulating and Joining Data in R with dplyr",
    "section": "thank you! 🙏",
    "text": "thank you! 🙏\nPlease take the post-workshop survey: https://bit.ly/dplyr-survey\nFuture trainings:\n\nInteractive Data Visualization in R with Shiny: 10/16 1-4pm; 10/17 1-4pm\nCreating Reproducible Documents with Quarto: 11/12 2-4pm\nFinding a Repository to Share Research Data: 12/3 12-1pm"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reshaping and Joining Data in R with dplyr",
    "section": "",
    "text": "Survey: Please be sure to take our survey and let us know your feedback about our March 11th, 2025 “Reshaping and Joining Data in R with dplyr” session.\nSlides: The slides are available here (or above using the Presentation link).\nRecording: This session was not recorded, but you can view a prior recording of this session here."
  },
  {
    "objectID": "index.html#dplyr-resources",
    "href": "index.html#dplyr-resources",
    "title": "Reshaping and Joining Data in R with dplyr",
    "section": "dplyr Resources",
    "text": "dplyr Resources\n\nR for Data Science 2e, Chapters 3 & 19\ndplyr documentation"
  }
]